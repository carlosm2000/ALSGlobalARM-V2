parameters:
  - name: sqlObjects
    type: object
    default: 
    - dbName: 'core'
      dacpacName: 'Sitecore.Core.dacpac'
      username: '$(coreUser)'
      password: '$(corePassword)'
      secUsername: '$(securityUser)'
      secPassword: '$(securityPassword)'
    - dbName: 'master'
      dacpacName: 'Sitecore.Master.dacpac'
      username: '$(masterUser)'
      password: '$(masterPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'web'
      dacpacName: 'Sitecore.Web.dacpac'
      username: '$(webUser)'
      password: '$(webPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'pools'
      dacpacName: 'Sitecore.Processing.pools.dacpac'
      username: '$(poolsUser)'
      password: '$(poolsPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'tasks'
      dacpacName: 'Sitecore.Processing.tasks.dacpac'
      username: '$(tasksUser)'
      password: '$(tasksPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'forms'
      dacpacName: 'Sitecore.Experienceforms.dacpac'
      username: '$(formsUser)'
      password: '$(formsPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'exmmaster'
      dacpacName: 'Sitecore.Exm.master.dacpac'
      username: '$(exmmasterUser)'
      password: '$(exmmasterPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'smm'
      dacpacName: 'Sitecore.Xdb.Collection.Database.Sql.dacpac'
      username: '$(smmUser)'
      password: '$(smmPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'shard0'
      dacpacName: 'Sitecore.Xdb.Collection.Shard0.dacpac'
      username: '$(smmUser)'
      password: '$(smmPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'shard1'
      dacpacName: 'Sitecore.Xdb.Collection.Shard1.dacpac'
      username: '$(smmUser)'
      password: '$(smmPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'refdata'
      dacpacName: 'Sitecore.Referencedata.dacpac'
      username: '$(refdataUser)'
      password: '$(refdataPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'ma'
      dacpacName: 'Sitecore.MarketingAutomationAzure.dacpac'
      username: '$(maUser)'
      password: '$(maPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'processingenginetasks'
      dacpacName: 'Sitecore.Processing.Engine.Tasks.dacpac'
      username: '$(processingengineUser)'
      password: '$(processingenginePassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'processingenginestorage'
      dacpacName: 'Sitecore.Processing.Engine.Storage.dacpac'
      username: '$(processingengineUser)'
      password: '$(processingenginePassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'reporting'
      dacpacName: 'Sitecore.Reporting.dacpac'
      username: '$(reportingUser)'
      password: '$(reportingPassword)'
      secUsername: ''
      secPassword: ''
    - dbName: 'messaging'
      dacpacName: 'Sitecore.Messaging.dacpac'
      username: '$(messagingUser)'
      password: '$(messagingPassword)'
      secUsername: ''
      secPassword: ''
  - name: shardDBs
    type: object
    default: 
    - smm
    - shard0
    - shard1       

jobs:
  - job: DacpacJob
    displayName: Deploy Dacpacs and script files
    pool:
      vmImage: 'windows-latest'

    steps:
      - ${{ each so in parameters.sqlObjects }}:
        - task: SqlAzureDacpacDeployment@1
          displayName: '${{ so.dacpacName }} Task'
          inputs:
            azureSubscription: '$(serviceConnectionName)'
            ServerName: '$(spokeDeploymentId)-sql.database.windows.net'
            DatabaseName: '$(spokeDeploymentId)-${{ so.dbName }}-db'
            SqlUsername: '$(sqlServerLogin)'
            SqlPassword: '$(sqlServerPassword)'
            DacpacFile: '$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\DacpacFiles\${{ so.dacpacName }}'
            AdditionalArguments: '/p:AllowIncompatiblePlatform=true'

  - job: DeploymentJob
    displayName: SqlScriptsJob
    dependsOn: DacpacJob
    pool:
      vmImage: 'windows-latest'

    steps:
      - task: AzurePowerShell@5
        displayName: AddFirewallRule
        inputs:
          azureSubscription: '$(serviceConnectionName)'
          scriptType: FilePath
          ScriptPath: '$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\SetAzureFirewallRule.ps1'
          scriptArguments: 
              -ServerName $(spokeDeploymentId)-sql `
              -ResourceGroup $(resourceGroupName)
          failOnStandardError: true
          azurePowerShellVersion: LatestVersion

      - ${{ each so in parameters.sqlObjects }}:
        - task: AzurePowerShell@5
          displayName: ReplacingVariablesOnScripts
          inputs:
            azureSubscription: '$(serviceConnectionName)'
            scriptType: FilePath
            scriptPath: '$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\ReplaceUserVariables.ps1'
            scriptArguments: 
              -FilePath "$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\${{ so.dbName }}_script.sql" `
              -Username "${{ so.username }}" `
              -Password "${{ so.password }}" `
              -SecUsername "${{ so.secUsername }}" `
              -SecPassword "${{ so.secPassword }}"
            failOnStandardError: true
            azurePowerShellVersion: LatestVersion

        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: Sqlcmd
            arguments: '-S $(spokeDeploymentId)-sql.database.windows.net -U $(sqlServerLogin) -P $(sqlServerPassword) -d $(spokeDeploymentId)-${{ so.dbName }}-db -i $(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\${{ so.dbName }}_script.sql'


      - task: AzurePowerShell@5
        displayName: ReplacingVariablesOnSetSitecoreAdminPassword
        inputs:
          azureSubscription: '$(serviceConnectionName)'
          scriptType: FilePath
          scriptPath: '$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\SetSitecoreAdminPassword.ps1'
          scriptArguments: 
            -FilePath "$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\SetSitecoreAdminPassword.sql" `
            -ScAdminPassword "$(sitecoreAdminPassword)"
          failOnStandardError: true
          azurePowerShellVersion: LatestVersion

      - task: CmdLine@1
        displayName: Run Sqlcmd
        inputs:
          filename: Sqlcmd
          arguments: '-S $(spokeDeploymentId)-sql.database.windows.net -U $(sqlServerLogin) -P $(sqlServerPassword) -d $(spokeDeploymentId)-core-db -i $(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\SetSitecoreAdminPassword.sql'

      - ${{ each sdb in parameters.shardDBs }}:
        - task: AzurePowerShell@5
          displayName: ReplacingVariablesOnShardsScripts
          inputs:
            azureSubscription: '$(serviceConnectionName)'
            scriptType: FilePath
            scriptPath: '$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\ReplaceShardVariables.ps1'
            scriptArguments: 
              -FilePath "$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\${{ sdb }}_azure.sql" `
              -ServerName "$(spokeDeploymentId)-sql" `
              -Shard0Name "$(spokeDeploymentId)-shard0-db" `
              -Shard1Name "$(spokeDeploymentId)-shard1-db"
            failOnStandardError: true
            azurePowerShellVersion: LatestVersion

        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: Sqlcmd
            arguments: '-S $(spokeDeploymentId)-sql.database.windows.net -U $(sqlServerLogin) -P $(sqlServerPassword) -d $(spokeDeploymentId)-${{ sdb }}-db -i $(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\${{ sdb }}_azure.sql'

      - task: AzurePowerShell@5
        displayName: RemoveFirewallRule
        inputs:
          azureSubscription: '$(serviceConnectionName)'
          scriptType: FilePath
          ScriptPath: '$(Build.SourcesDirectory)\InstallationPipeline\SqlInitialFiles\SqlScripts\RemoveAzureFirewallRule.ps1'
          scriptArguments: 
              -ServerName $(spokeDeploymentId)-sql `
              -ResourceGroup $(resourceGroupName)
          failOnStandardError: true
          azurePowerShellVersion: LatestVersion
